"""
Bot.py - –û—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –º—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
–í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –º–æ–¥—É–ª—ñ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å,
—Ä–µ–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—ó, –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
—Ç–∞ –Ω–∞–¥–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.

–ê–≤—Ç–æ—Ä: –ú–∞–∫—Å–∏–º –¢—Ä—ñ–Ω–µ—î–≤

"""

from telebot import TeleBot
from telebot.types import BotCommand
from components.settings import TELEGRAM_TOKEN
from random import choice, randint
from urllib.parse import quote_plus

COMMANDS = {
    "dice": "–ì—Ä–∞–ª—å–Ω–∏–π –∫—É–±–∏–∫",
    "hello": "–ü—Ä–∏–≤—ñ—Ç–∞—Ç–∏—Å—è",
    "max": "–ó–Ω–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ",
    "min": "–ó–Ω–∞–π—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ",
    "pingpong": "–ú—ñ–Ω—ñ –≥—Ä–∞ '–ü—ñ–Ω–≥ –ü–æ–Ω–≥'",
    "qr": "–°—Ç–≤–æ—Ä–∏—Ç–∏ QR-–∫–æ–¥",
    "bet": "–ó—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É –Ω–∞ —á–µ—Ä–≤–æ–Ω–µ –∞–±–æ —á–æ—Ä–Ω–µ",
}
GREETINGS = (
    "Hello",
    "–ü—Ä–∏–≤—ñ—Ç",
    "–í—ñ—Ç–∞—é",
    "Aloha",
    "–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫—ñ –±—É–ª–∏",
)
DICE_NUMBERS = ("0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£")
BETS = [
    ["üü•", "—á–µ—Ä–≤–æ–Ω–µ", "red"],
    ["‚¨õÔ∏è", "—á–æ—Ä–Ω–µ", "black"],
]

# QR Api documentation: https://goqr.me/api/doc/create-qr-code/
QR_SIZE = 200
QR_API = \
    "https://api.qrserver.com/v1/create-qr-code/?size={size}x{size}&data={data}"


bot = TeleBot(TELEGRAM_TOKEN)


def is_number(t: str) -> bool:
    return t.lstrip("-").replace(".", "", 1).isdigit()


def is_natural(t: str) -> bool:
    try:
        n = int(t)
    except ValueError:
        return False
    return n >= 0


def number(t: str) -> [int | float]:
    if "." in t:
        return float(t)
    else:
        return int(t)


@bot.message_handler(commands=["max"])
def maximum(message) -> None:
    max_number = None
    elements = message.text.split()
    for element in elements:
        if is_number(element):
            x = number(element)
            if not max_number:
                max_number = x
            elif x > max_number:
                max_number = x
    bot.send_message(message.chat.id, str(max_number))


@bot.message_handler(commands=["min"])
def minimum(message) -> None:
    min_number = None
    elements = message.text.split()
    for element in elements:
        if is_number(element):
            x = number(element)
            if not min_number:
                min_number = x
            elif x < min_number:
                min_number = x
    bot.send_message(message.chat.id, str(min_number))


@bot.message_handler(commands=["pingpong"])
def ping_pong(message) -> None:
    parameter = message.text[len("/pingpong "):]
    if not is_natural(parameter):
        bot.send_message(message.chat.id, "–ù–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–µ —á–∏—Å–ª–æ")
        return
    n = number(parameter)
    if n % 3 == 0 and n % 5 == 0:
        response = "Ping Pong"
    elif n % 3 == 0:
        response = "Ping"
    elif n % 5 == 0:
        response = "Pong"
    else:
        response = parameter
    bot.send_message(message.chat.id, response)


@bot.message_handler(commands=["hello"])
def hello(message) -> None:
    bot.send_message(message.chat.id, choice(GREETINGS))


@bot.message_handler(commands=["dice"])
def dice(message) -> None:
    bot.send_message(message.chat.id, DICE_NUMBERS[randint(1, 6)])


@bot.message_handler(commands=["qr"])
def qr_generator(message) -> None:
    qr_data = message.text[len("/qr "):]
    if not qr_data:
        bot.send_message(message.chat.id, "–ü–æ—Ç—Ä—ñ–±–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä")
        return
    bot.send_photo(
        message.chat.id,
        # open("img.png", "rb"),
        QR_API.format(size=QR_SIZE, data=quote_plus(qr_data)),
        caption=qr_data
    )


@bot.message_handler(commands=["bet"])
def make_bet(message) -> None:
    user_bet = message.text[len("/bet "):].lower()
    if not any([user_bet in b for b in BETS]):
        bot.send_message(
            message.chat.id, "–°—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–∞ —á–µ—Ä–≤–æ–Ω–µ –∞–±–æ —á–æ—Ä–Ω–µ")
        return
    bot_bet = choice(BETS)
    bot.send_message(
        message.chat.id, bot_bet[0])
    if user_bet in bot_bet:
        bot.send_message(
            message.chat.id, "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏!")
    else:
        bot.send_message(
            message.chat.id, "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏")


def listener(messages):
    for m in messages:
        if m.content_type == "text":
            print(f"{m.from_user.first_name} [{m.chat.id=}]: {m.text}")


@bot.message_handler(content_types=["text"])
def handle_message(message) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.

    –§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –í–æ–Ω–∞ –∞–Ω–∞–ª—ñ–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–µ–∞–≥—É—î –Ω–∞ –Ω—å–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —á–∏–Ω–æ–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - message: –û–±'—î–∫—Ç, —è–∫—ñ–π –º—ñ—Å—Ç–∏—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ç–µ–ª–µ–≥—Ä–∞–º

    –ü–æ–≤–µ—Ä—Ç–∞—î: None
    """
    bot.send_message(message.chat.id, message.text)


if __name__ == "__main__":
    print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—é –∫–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é...")
    bot.delete_my_commands()
    bot.set_my_commands([BotCommand(k, v) for k, v in COMMANDS.items()])
    bot.set_update_listener(listener)
    print("–°–ª—É—Ö–∞—é –∑–∞–ø–∏—Ç–∏...")
    bot.infinity_polling()
